// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, Cosmos, Ensemble, Point, Zodiac,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone-rel');

  Ensemble = require('./ensemble');

  Zodiac = require('./zodiac');

  Point = (function(_super) {

    __extends(Point, _super);

    function Point() {
      return Point.__super__.constructor.apply(this, arguments);
    }

    Point.prototype.initialize = function() {};

    return Point;

  })(Backbone.RelationalModel);

  Cosmos = (function() {

    Cosmos.prototype.dispositors = {
      domicile: ["JU", "MA", "VE", "ME", "MO", "SO", "ME", "VE", "MA", "JU", "SA", "SA"],
      exaltation: [["VE", 27], ["SO", 19], ["MO", 3], ["NN", 3], ["JU", 15], [null], ["ME", 15], ["SA", 21], [null], ["SN", 3], ["MA", 28], [null]],
      trigons: {
        F: {
          C: "SA",
          D: "SO",
          N: "JU"
        },
        E: {
          C: "MA",
          D: "VE",
          N: "MO"
        },
        A: {
          C: "JU",
          D: "SA",
          N: "ME"
        },
        W: {
          C: "MO",
          D: "VE",
          N: "MA"
        }
      },
      confines: {
        EC: [
          {
            VE: 12,
            JU: 4,
            ME: 3,
            MA: 9,
            SA: 2
          }, {
            JU: 6,
            VE: 6,
            ME: 8,
            MA: 5,
            SA: 5
          }, {
            VE: 8,
            ME: 6,
            JU: 8,
            SA: 5,
            MA: 3
          }, {
            ME: 6,
            JU: 6,
            VE: 5,
            MA: 7,
            SA: 6
          }, {
            MA: 7,
            VE: 6,
            ME: 6,
            JU: 7,
            SA: 4
          }, {
            JU: 6,
            VE: 5,
            SA: 7,
            ME: 6,
            MA: 6
          }, {
            ME: 7,
            VE: 10,
            JU: 4,
            MA: 7,
            SA: 2
          }, {
            SA: 6,
            ME: 8,
            JU: 7,
            VE: 7,
            MA: 2
          }, {
            MA: 7,
            VE: 4,
            ME: 8,
            JU: 5,
            SA: 6
          }, {
            JU: 12,
            VE: 5,
            ME: 4,
            SA: 5,
            MA: 4
          }, {
            ME: 7,
            JU: 7,
            VE: 8,
            SA: 4,
            MA: 4
          }, {
            ME: 7,
            VE: 6,
            JU: 7,
            MA: 5,
            SA: 5
          }
        ],
        PC: [
          {
            VE: 8,
            JU: 6,
            ME: 6,
            MA: 6,
            SA: 4
          }, {
            JU: 6,
            VE: 8,
            ME: 7,
            MA: 5,
            SA: 4
          }, {
            VE: 8,
            ME: 7,
            JU: 7,
            SA: 4,
            MA: 4
          }, {
            ME: 7,
            JU: 6,
            VE: 7,
            MA: 6,
            SA: 4
          }, {
            MA: 6,
            JU: 7,
            ME: 7,
            VE: 7,
            SA: 3
          }, {
            SA: 6,
            ME: 7,
            VE: 6,
            JU: 6,
            MA: 5
          }, {
            ME: 7,
            VE: 6,
            JU: 5,
            SA: 6,
            MA: 6
          }, {
            SA: 6,
            VE: 5,
            JU: 8,
            ME: 5,
            MA: 6
          }, {
            MA: 6,
            JU: 8,
            VE: 7,
            ME: 6,
            SA: 3
          }, {
            JU: 8,
            VE: 6,
            ME: 5,
            SA: 6,
            MA: 5
          }, {
            VE: 6,
            ME: 6,
            JU: 7,
            MA: 6,
            SA: 5
          }, {
            SA: 6,
            ME: 6,
            VE: 8,
            JU: 5,
            MA: 5
          }
        ]
      },
      faces: null,
      monomoria: null
    };

    Cosmos.prototype.dispositing = {};

    Cosmos.prototype.determine = {
      element: function(idz) {
        switch (idz % 4) {
          case 0:
            return "W";
          case 1:
            return "F";
          case 2:
            return "E";
          case 3:
            return "A";
          default:
            throw "Cannot determine element for representation number " + idz + ".";
        }
      }
    };

    Cosmos.prototype.zodiacAttributes = function() {
      var data, dispositor, element, from, i, idc, idz, key, last, lord, lords, n, portions, reverse, till, trigon_lords, value, values, zodiac, _base, _i, _ref, _ref1, _ref2, _ref3;
      zodiac = [];
      trigon_lords = {};
      _ref = this.dispositors.trigons;
      for (element in _ref) {
        lords = _ref[element];
        trigon_lords[element] = [];
        for (key in lords) {
          value = lords[key];
          trigon_lords[element].push({
            id: key,
            lord: value
          });
        }
      }
      for (i = _i = 0; _i <= 11; i = ++_i) {
        idz = i === 0 ? 12 : i;
        zodiac.push({});
        zodiac[i].element = this.determine.element(idz);
        _ref1 = this.dispositors;
        for (dispositor in _ref1) {
          data = _ref1[dispositor];
          switch (dispositor) {
            case "domicile":
              value = data[i];
              reverse = idz;
              break;
            case "exaltation":
              value = data[i][0];
              reverse = idz;
              break;
            case "trigons":
              value = trigon_lords[this.determine.element(idz)];
              reverse = null;
              break;
            case "confines":
              value = [];
              for (key in data) {
                values = data[key];
                n = 1;
                last = 0;
                _ref2 = values[i];
                for (lord in _ref2) {
                  portions = _ref2[lord];
                  idc = "" + key + "-" + (n++);
                  from = last + 1;
                  till = last + portions;
                  last = till;
                  value.push({
                    id: idc,
                    scheme: key,
                    portions: portions,
                    lord: lord,
                    from: from,
                    till: till
                  });
                }
              }
              reverse = null;
              break;
            default:
              continue;
          }
          zodiac[i][dispositor] = value;
          if (value !== null && reverse !== null) {
            if ((_ref3 = (_base = this.dispositing)[value]) == null) {
              _base[value] = {};
            }
            this.dispositing[value][dispositor] = reverse;
          }
        }
      }
      return zodiac;
    };

    function Cosmos(language, school) {
      this.language = language != null ? language : "en";
      this.school = school;
      this.zodiac = new Zodiac(this.zodiacAttributes(), this);
      this.ensemble = new Ensemble([], this);
    }

    Cosmos.prototype.recreate = function() {};

    Cosmos.prototype.point = function(ephemeris_id) {};

    return Cosmos;

  })();

  module.exports = Cosmos;

}).call(this);
